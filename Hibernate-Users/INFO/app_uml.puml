@startuml
class org.example.app.view.ContactDeleteView {
+ Map<String,String> getData()
+ void getOutput(String)
}
class org.example.app.view.ContactCreateView {
+ Map<String,String> getData()
+ void getOutput(String)
}
class org.example.app.exceptions.OptionException {
}
class org.example.app.utils.ContactMapper {
+ Contact mapContactData(Map<String,String>)
}
class org.example.app.utils.AppValidator {
+ {static} String ID_RGX
+ {static} String PHONE_RGX
+ {static} String EMAIL_RGX
+ {static} boolean isIdValid(String)
+ {static} boolean isPhoneValid(String)
+ {static} boolean isEmailValid(String)
}
class org.example.app.view.AppView {
~ Scanner scanner
~ int option
+ int chooseOption()
- void showMenu()
+ void getOutput(String)
}
class org.example.app.view.ContactReadByIdView {
+ Map<String,String> getData()
+ void getOutput(String)
}
class org.example.app.entity.Contact {
- Long id
- String firstName
- String lastName
- String phone
- String email
+ Long getId()
+ void setId(Long)
+ String getFirstName()
+ void setFirstName(String)
+ String getLastName()
+ void setLastName(String)
+ String getPhone()
+ void setPhone(String)
+ String getEmail()
+ void setEmail(String)
+ String toString()
}
class org.example.app.utils.AppStarter {
+ {static} void startApp()
}
class org.example.app.controller.AppController {
~ AppView view
~ AppService service
+ void runApp()
}
class org.example.app.utils.ContactValidator {
+ Map<String,String> validateContactData(Map<String,String>)
}
class org.example.app.view.ContactUpdateView {
+ Map<String,String> getData()
+ void getOutput(String)
}
class org.example.app.App {
+ {static} void main(String[])
}
class org.example.app.service.AppService {
~ ContactController controller
+ void filterChoice(int)
}
interface org.example.app.repository.AppRepository {
~ String create(T)
~ Optional<List<T>> read()
~ String update(T)
~ String delete(Long)
~ Optional<T> readById(Long)
}
class org.example.app.utils.HibernateUtil {
- {static} SessionFactory sessionFactory
+ {static} SessionFactory getSessionFactory()
- {static} Configuration getConfiguration()
}
class org.example.app.repository.impl.ContactRepository {
+ String create(Contact)
+ Optional<List<Contact>> read()
+ String update(Contact)
+ String delete(Long)
+ Optional<Contact> readById(Long)
- boolean isEntityWithSuchIdExists(Contact)
}
class org.example.app.controller.ContactController {
~ ContactService service
+ void createContact()
+ void readContacts()
+ void updateContact()
+ void deleteContact()
+ void readContactById()
}
class org.example.app.utils.Constants {
+ {static} String WRONG_PHONE_MSG
+ {static} String WRONG_EMAIL_MSG
+ {static} String WRONG_ID_MSG
+ {static} String DATA_ABSENT_MSG
+ {static} String DATA_INSERT_MSG
+ {static} String DATA_UPDATE_MSG
+ {static} String DATA_DELETE_MSG
+ {static} String APP_CLOSE_MSG
+ {static} String INPUT_REQ_MSG
+ {static} String INCORRECT_OPTION_MSG
+ {static} String ID_NO_EXISTS_MSG
}
class org.example.app.exceptions.ContactException {
~ Map<String,String> errors
+ String getErrors(Map<String,String>)
}
class org.example.app.view.ContactReadView {
+ void getOutput(String)
}
class org.example.app.service.ContactService {
~ ContactRepository repository
+ String createContact(Map<String,String>)
+ String readContacts()
+ String updateContact(Map<String,String>)
+ String deleteContact(Map<String,String>)
+ String readContactById(Map<String,String>)
}


org.example.app.exceptions.Exception <|-- org.example.app.exceptions.OptionException
org.example.app.repository.AppRepository <|.. org.example.app.repository.impl.ContactRepository
org.example.app.exceptions.RuntimeException <|-- org.example.app.exceptions.ContactException
@enduml